!
!   Copyright 1974-2020 George Delic, HiPERISM Consulting LLC
!
!   program MAIN
!
!   This program is free software: you can redistribute it and/or modify
!   it under the terms of the GNU General Public License as published by
!   the Free Software Foundation, either version 3 of the License, or
!   any later version.
!
!   This program is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
!   See the GNU General Public License for more details.
!      https://www.gnu.org/licenses/gpl-3.0.en.html
!      https://www.gnu.org/licenses/gpl-3.0.txt
!   A copy is included in this distribution
!
! PURPOSE: compute the Legendre Polynomial zeros for a default 
!          range of orders from 1 to 150  
!          where the lower and upper bounds are selectable in the code
!          These zeros are bounded by an inequality using the zeros of 
!          the spherical Bessel function of order zero as input data
!
! AUTHOR:  George Delic, Ph.D., for this source code that 
!          references equation Eqs.(34,25) in
!          G. Delic,
!          The legendre series and a quadrature formula for its coefficients,
!          Journal of Computational Physics, vol. 14 (1974), pp. 254-268.
!
! ORIGIN:  Source code developed by AUTHOR
!
! LANGUAGE:  FOTRAN IV and Fortran 77 (ANSI X3J3) X3.9-1978
!
! This code was developed on the Telefunken TR-440 with Fortran IV in 1973
! which provided a word length with some 24 decimals in double precision:
!     IMPLICIT REAL*8(A-H,O-Z)
! However, current commodity processors need to be forced to use quadruple
! precision using IMPLICIT REAL*16(A-H,O-Z) and constants defined as:
!     1.0Q+00, etc.
! In addition the compiler must be forced to avoid optimizations that
! would truncate precision. In the current example, the Intel compiler is
! invoked with:
!
! -mieee-fp -init=arrays,zero -double-size 128 -real-size 128 -integer-size 32
!
! precision using IMPLICIT REAL*16(A-H,O-Z) and constants defined as:
      IMPLICIT REAL*16(A-H,O-Z)
      REAL SROP(150),SAKN(150)
      DIMENSION EROJ(150),EROP(2,150),IERO(2,150),CLOW(2),CLUP(2)
      DIMENSION AKN(150)
      DATA NEROJ/150/,NOGAUS/0/
!     DATA NEROJ/150/,NOGAUS/1/
      DATA PI/3.141592653589793238462643Q+00/
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

! for timing calls and calculation in seconds
      REAL*8  hc_secs
      REAL*8, PARAMETER :: inverse_count = 1.0d-06
!
! for timing calls in microseconds
!
      INTEGER (KIND=8) hc_t0, hc_t1
!     integer (KIND=8) count_rate, count_max ! for timing variables

!!      LOGICAL, PARAMETER   ::  TIMES = .FALSE.  ! for diagnostic times
      LOGICAL, PARAMETER   ::  TIMES = .TRUE.  ! for diagnostic times

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

! read in firsat 150 zeros of the Spherical Bessel function of order 0
      DO 11 IR=1,150
      READ(5,10)IS,EROJ(IR)
      WRITE(6,10)IS,EROJ(IR)
      IF(IR.NE.IS)GO TO 12
   11 CONTINUE
      READ (5,8) EPSI
      WRITE(6,9) EPSI
      WRITE(7,9) EPSI

      if (TIMES) then
! may need to check these           vvvvvvvvvv  vvvvvvvvv on your platform
!         call system_clock (hc_t0, count_rate, count_max)
!         print *, count_rate, ' count_rate '
!         print *, count_max , ' count_max '
         call system_clock(count=hc_t0)
      endif

      C0=1.0Q+00-(2.0Q+00/PI)**2
      DO 6 KA=2,NEROJ
!     DO 6 KA=140,NEROJ       ! example of range selection
      WRITE(6,15)
      KA1=KA
      IF(MOD(KA,2).EQ.0)GO TO 13
      KA1=KA1+1
   13 XA=KA
      KA1=KA1/2
      C1=XA+0.5Q+00
      C2=C1**2+C0/4.0Q+00
      C2=DSQRT(C2)
      DO 4 ISN=1,2
      DO 14 IK=1,KA1
      GO TO (20,21),ISN
   21 K=KA-IK+1
      GO TO 24
   20 K=IK
   24 CLOW(ISN)=DCOS(EROJ(K)/C2)
      CLUP(ISN)=DCOS(EROJ(K)/C1)
      XX1=CLOW(ISN)
C     WRITE(6,2)K,XX1,CLOW(ISN),CLUP(ISN)
      DO 5 IER=1,10000
      P0=1.0Q+00
      P1=XX1
      DO 3 IT=2,KA
C     X0=IT
C     X0=1.0Q+00/X0
C     P2=(2.0Q+00-X0)*XX1*P1-(1.0Q+00-X0)*P0
      X0=IT-1
      X1=IT+IT-1
      X2=IT
      X2=1.0/X2
      P2=(X1*XX1*P1-X0*P0)*X2
      P0=P1
    3 P1=P2
      PPK=XA*(P0-XX1*P1)/(1.0D0-XX1**2)
      COR=P1/PPK
      IF(DABS(COR).LT.EPSI)GO TO 19
      XX1=XX1-COR
C     IF(XX1.GT.CLOW)GO TO 16
C     XX1=CLOW
C     GO TO 5
C  16 IF(XX1.LT.CLUP)GO TO 5
C     XX1=CLUP
    5 CONTINUE
   19 IERO(ISN,K)=IER
      IF(NOGAUS.EQ.0)GO TO 14
      GO TO (30,14),ISN
   30 AKN(K)=2.0Q+00*(1.0Q+00-XX1**2)/(XA*P0)**2
   14 EROP(ISN,K)=XX1
      IF(NOGAUS.EQ.0)GO TO 40
    4 CONTINUE
   40 CONTINUE
      WRITE(6,15)
      WRITE(6,7)KA
      IF(NOGAUS.EQ.0)GO TO 37
      DO 22 IO=1,KA1
      SROP(IO)=SNGL(EROP(1,IO))
      SAKN(IO)=SNGL(AKN(IO))
      FO=EROP(1,IO)-DABS(EROP(2,KA-IO+1))
   22 WRITE(6,23)IO,IERO(1,IO),EROP(1,IO),IERO(2,KA-IO+1),FO,AKN(IO)
C  22 WRITE(6,23)IO,IERO(1,IO),EROP(1,IO),IERO(2,KA-IO+1),EROP(2,KA-IO+1
C    1),FO
      WRITE(6,15)
      SUM1=0.0Q+00
      SUM2=0.0Q+00
      SUM3=0.0Q+00
      SUM4=0.0Q+00
      SUM5=0.0Q+00
      SUM6=0.0Q+00
      DO 31 IA1=1,KA1
      SUM1=SUM1+AKN(IA1)
      SUM2=SUM2+AKN(IA1)*EROP(1,IA1)
      SUM3=SUM3+AKN(IA1)*EROP(1,IA1)**2
      SUM4=SUM4+AKN(IA1)*EROP(1,IA1)**3
      SUM5=SUM5+AKN(IA1)*EROP(1,IA1)**4
      SUM6=SUM6+EROP(1,IA1)**2
   31 CONTINUE
      DO 32 IA1=1,KA1
      SUM1=SUM1+AKN(IA1)
      SUM2=SUM2-AKN(IA1)*EROP(1,IA1)
      SUM3=SUM3+AKN(IA1)*EROP(1,IA1)**2
      SUM4=SUM4-AKN(IA1)*EROP(1,IA1)**3
      SUM5=SUM5+AKN(IA1)*EROP(1,IA1)**4
   32 CONTINUE
      TEST1=2.0Q+00-SUM1
      TEST2=SUM2
      TEST3=2.0Q+00/3.0Q+00-SUM3
      TEST4=SUM4
      TEST5=0.4Q+00-SUM5
      XAA=KA*(KA-1)
      XAB=2*(KA+KA-1)
      TEST6=XAA/XAB-SUM6
      WRITE(6,8)TEST1,TEST2,TEST3,TEST4
      WRITE(6,8)TEST5,TEST6
      WRITE(6,15)
      WRITE(7,10)KA
      DO 33 IO=1,KA1
   33 WRITE(7,34)IO,EROP(1,IO),AKN(IO)
      WRITE(7,10)KA
      DO 35 IO=1,KA1
   35 WRITE(7,36)IO,SROP(IO),SAKN(IO)
   37 KOUT=KA
      IF(MOD(KA,2).EQ.0)GO TO 39
      KOUT=KOUT-1
   39 KOUT=KOUT/2
      WRITE(6,38)((IOUT,EROP(1,IOUT)),IOUT=1,KOUT)
      WRITE(7,10)KA
      WRITE(7,38)((IOUT,EROP(1,IOUT)),IOUT=1,KOUT)
    6 CONTINUE

      if (TIMES) then
         call system_clock(count=hc_t1)
         hc_secs = dble( float(hc_t1 - hc_t0) ) * inverse_count
         Write ( 6, 9802 ) hc_t1 - hc_t0, hc_secs
 9802 FORMAT(/, 9x, 'wall clock time',I20, ' usec', 1x, f12.6, ' sec ' )
      endif

   12 STOP
    2 FORMAT(20X,I3,3D31.24)
    7 FORMAT(/,10X,41HZEROS OF THE LEGENDRE POLYNOMIAL OF ORDER ,I4,/)
    8 FORMAT(1H ,4D31.24)
    9 FORMAT(/,10X,10HEPSILON = ,D31.24,/)
   10 FORMAT(1H ,I4,D31.24)
   15 FORMAT(//)
   18 FORMAT(8(5X,2I5))
   23 FORMAT(1H ,I5,5X,2(I5,1X,D31.24),D31.24)
   27 FORMAT(3(1X,I4,E20.12))
   34 FORMAT(1H ,I4,2D31.24)
   36 FORMAT(1H ,I4,2E20.12)
   38 FORMAT(2(1X,I4,D31.24))
      END
